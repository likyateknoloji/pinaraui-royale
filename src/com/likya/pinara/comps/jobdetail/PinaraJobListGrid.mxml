<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.apache.org/royale/spark" 
		 xmlns:mx="library://ns.apache.org/royale/mx" 
		 width="100%" height="100%" 
		 xmlns:jobmanager="com.likya.pinara.services.jobmanager.*" 
		 xmlns:jobdetail="com.likya.pinara.comps.jobdetail.*" 
		 xmlns:grpmanager="com.likya.pinara.services.grpmanager.*" >
	<fx:Script>
		<![CDATA[

			import org.apache.royale.events.Event;
			
			import com.likya.pinara.comps.DummyForm;
			import com.likya.pinara.comps.GrpNameForm;
			import com.likya.pinara.event.ResourceEvent;
			import com.likya.pinara.utils.BasicAuthenticationHandler;
			import com.likya.pinara.utils.RoleFilters;
			import com.likya.pinara.utils.Transformer;
			
			import mx.collections.XMLListCollection;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Grid;
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			public var jobListXmlCollection:XMLListCollection;
			
			[Bindable]
			public var selectedGroupId:String;
			
			protected function selectionChangeHandlerPinara(event:GridSelectionEvent):void {
				const eventGrid:Grid = event.currentTarget.grid;
				var currentDataItem:Object = eventGrid.selectedItem; 
				dispatchEvent(new ResourceEvent(ResourceEvent.ROW_SELECTION_CHANGED, currentDataItem));
			}
			
			public function getJobCommandType(item:Object, column:GridColumn):String {
				return item.baseJobInfos.jobTypeDetails.jobCommandType;
			}
			
			public function getJobTriggerType(item:Object, column:GridColumn):String {
				return item.management.trigger;
			}
			
			public function getRealizedDuration(item:Object, column:GridColumn):String {
				return item.runtimeParams.realizedDuration;
			}
			
			protected function grpMngService_resultHandler(event:ResultEvent):void
			{
				BasicAuthenticationHandler.service_resultHandler(this, event);
			}
			
			protected function grpMngService_faultHandler(event:FaultEvent):void
			{
				BasicAuthenticationHandler.service_faultHandler(event);
				
			}
			
			protected function enableAllBtn_clickHandler(event:MouseEvent):void
			{
				BasicAuthenticationHandler.authAndCall(grpMngService, "enablegrp", selectedGroupId);				
				dispatchEvent(new ResourceEvent(ResourceEvent.UPDATE_TREE, null));
				dispatchEvent(new ResourceEvent(ResourceEvent.LISTNODE_SELECTED, selectedGroupId));
			}
			
			protected function disableAllBtn_clickHandler(event:MouseEvent):void
			{
				BasicAuthenticationHandler.authAndCall(grpMngService, "disablegrp", selectedGroupId);
				dispatchEvent(new ResourceEvent(ResourceEvent.UPDATE_TREE, null));
				dispatchEvent(new ResourceEvent(ResourceEvent.LISTNODE_SELECTED, selectedGroupId));
			}
			
			protected function pinaraJobList_addedToStageHandler(event:Event):void
			{
				mngColumn.visible = RoleFilters.hasOperRole();
			}
			
			protected function button1_clickHandler(event:MouseEvent):void {
				
				var dummyWindow:DummyForm = PopUpManager.createPopUp(this, DummyForm, true) as DummyForm;
				dummyWindow.title="Job List XML";
				dummyWindow.htmlTextAsHTML = jobListXmlCollection.children().toXMLString();
				PopUpManager.centerPopUp(dummyWindow);
				dummyWindow.setFocus();
					
				// Alert.show("length : " + jobListXmlCollection.children().toXMLString());
			}
			
			protected function refresh_button1_clickHandler(event:MouseEvent):void {
				dispatchEvent(new ResourceEvent(ResourceEvent.LISTNODE_SELECTED, selectedGroupId));
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var currentDataItem:XML = XML(pinaraJobList.selectedItem); 
				if(currentDataItem.hasOwnProperty("@Id")) {
					FlexGlobals.topLevelApplication.dispatchEvent(new ResourceEvent(ResourceEvent.SELECT_TREENODE, currentDataItem.@Id));
				}
				trace();
			}
			public static function getLastWorkingStatus(item:Object, column:GridColumn):String {
				var stateInfo:String = "";
				
				if(item.stateInfos.LiveStateInfos.LiveStateInfo[0] != null && item.stateInfos.LiveStateInfos.LiveStateInfo[0].StatusName != null) {
					stateInfo = item.stateInfos.LiveStateInfos.LiveStateInfo[0].StatusName;
				}
				if(item.stateInfos.LiveStateInfos.LiveStateInfo[1] != null && item.stateInfos.LiveStateInfos.LiveStateInfo[1].StatusName != null) {
					stateInfo = item.stateInfos.LiveStateInfos.LiveStateInfo[1].StatusName;
				}
				
				return stateInfo;
			}

			protected function changeGrpName_clickHandler(event:MouseEvent):void
			{
				var grpNameWindow:GrpNameForm = PopUpManager.createPopUp(this, GrpNameForm, true) as GrpNameForm;
				grpNameWindow.title="Change Group Name";
				grpNameWindow.selectedNetTreeId = selectedGroupId;
				PopUpManager.centerPopUp(grpNameWindow);
				grpNameWindow.setFocus();
			}

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<jobmanager:JobManager id="grpMngService" result="grpMngService_resultHandler(event)" fault="grpMngService_faultHandler(event)"/>
	</fx:Declarations>
		<!-- Define a Button control to open the menu -->
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:HGroup>
		<s:Button label="{resourceManager.getString('messages', 'refresh')}" click="refresh_button1_clickHandler(event)" visible="true" includeInLayout="true"/>
		<s:Button label="{resourceManager.getString('messages', 'xmlButtonLabel')}" click="button1_clickHandler(event)" visible="true" includeInLayout="true"/>
		<jobdetail:GridStatuFilter data="{jobListXmlCollection}" width="100%" height="20"/>
		<s:Button id="enableAllBtn" label="{resourceManager.getString('messages', 'enableAllBtnLabel')}" visible="false" includeInLayout="false" click="enableAllBtn_clickHandler(event)" />
		<s:Button id="disableAllBtn" label="{resourceManager.getString('messages', 'disableAllBtnLabel')}" visible="false" includeInLayout="false" click="disableAllBtn_clickHandler(event)" />
		<s:Button id="changeGrpNameBtn" label="Change Grp Name" visible="false" includeInLayout="false" click="changeGrpName_clickHandler(event)"/>
		<s:Button visible="false"/>
		<s:Button id="grpState" label="{resourceManager.getString('messages', 'disabledGroupLabel')}" chromeColor="0xFF2D00" visible="false" includeInLayout="false" fontWeight="bold" enabled="false" />
		<s:Button visible="true" label="{resourceManager.getString('messages', 'showInTreeButLabel')}" click="button2_clickHandler(event)"/>
	</s:HGroup>
	
	<s:DataGrid id="pinaraJobList" width="100%" height="100%" selectionChange="selectionChangeHandlerPinara(event)" dataProvider="{jobListXmlCollection}" addedToStage="pinaraJobList_addedToStageHandler(event as org.apache.royale.events.Event)"> 
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="{resourceManager.getString('messages', 'stateGrid')}" width="{this.pinaraJobList.width * 0.10}">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:layout>
									<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
								</s:layout>
								<jobdetail:StateImageItem id="stateImageItem" data="{data}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn headerText="{resourceManager.getString('messages', 'manageGrid')}" width="150" maxWidth="250" id="mngColumn">
					<s:itemRenderer>
						<fx:Component>
							<jobdetail:PinaraJobListGridManageColumn selectedGroupId="{outerDocument.selectedGroupId}" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="@Id" headerText="{resourceManager.getString('messages', 'jobIdGrid')}" sortDescending="false" sortCompareFunction="Transformer.compareIds" width="{this.pinaraJobList.width * 0.06}">
					<s:itemRenderer>
						<!--fx:Component>
							<s:DefaultGridItemRenderer textAlign="left" />
						</fx:Component->
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="baseJobInfos.jsName" headerText="{resourceManager.getString('messages', 'jobNameGrid')}" width="{this.pinaraJobList.width * 0.10}">
					<s:itemRenderer>
						<!--fx:Component>
							<s:DefaultGridItemRenderer textAlign="left" />
						</fx:Component-->
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="job_command_type" sortCompareFunction="Transformer.compareSortString" labelFunction="getJobCommandType" headerText="{resourceManager.getString('messages', 'jobCommandTypeGrid')}" width="{this.pinaraJobList.width * 0.12}"/>
				<s:GridColumn dataField="job_trigger_type" sortCompareFunction="Transformer.compareSortString" labelFunction="getJobTriggerType" headerText="{resourceManager.getString('messages', 'jobTriggerTypeGrid')}" width="{this.pinaraJobList.width * 0.12}"/>
				<s:GridColumn dataField="@groupId" headerText="{resourceManager.getString('messages', 'jobGrupIdGrid')}" width="{this.pinaraJobList.width * 0.10}"/>
				<s:GridColumn dataField="son_cz" sortCompareFunction="Transformer.compareSortForDate" labelFunction="Transformer.getRecordedDT" headerText="{resourceManager.getString('messages', 'jobLastWTGrid')}" width="{this.pinaraJobList.width * 0.15}"/>
				<s:GridColumn dataField="planlanan_cz" sortCompareFunction="Transformer.compareSortForDate" labelFunction="Transformer.getActualDT" headerText="{resourceManager.getString('messages', 'jobPlannedWTGrid')}" width="{this.pinaraJobList.width * 0.15}"/>
				<s:GridColumn dataField="son_calisma_suresi" sortCompareFunction="Transformer.compareSortForDuration" labelFunction="getRealizedDuration" headerText="{resourceManager.getString('messages', 'jobRealizedDuration')}" width="{this.pinaraJobList.width * 0.10}"/>
				<s:GridColumn dataField="son_calisma_statu" sortCompareFunction="Transformer.compareSortString" labelFunction="getLastWorkingStatus" headerText="{resourceManager.getString('messages', 'jobLastWorkingStatus')}" width="{this.pinaraJobList.width * 0.12}"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
</s:Group>
