<?xml version="1.0"?>
<!--borderAlpha="1"-->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.apache.org/royale/mx" 
			   xmlns:s="library://ns.apache.org/royale/spark"
			   width="520" height="450" 
			   close="removeMe();" keyDown="titleWindow_keyDown(event);"
			   creationComplete="titlewindow1_creationCompleteHandler(event)" xmlns:user="com.likya.comps.crud.user.*" xmlns:userops="com.likya.pinara.services.userops.*" xmlns:jobdetail="com.likya.pinara.comps.jobdetail.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.event.ResourceEvent;
			import com.likya.pinara.main.PinaraUI;
			import com.likya.pinara.model.ModelLocator;
			import com.likya.pinara.utils.BasicAuthenticationHandler;
			import com.likya.pinara.utils.UserUtils;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.KeyboardEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import mx.core.Keyboard;
			// import flash.ui.Keyboard;
			
			private var currentDataItem:XML;

			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void {
				// Alert.show("htmlTextAsHTML : " + htmlTextAsHTML);
				// myText.textFlow = TextConverter.importToFlow(htmlTextAsHTML, TextConverter.PLAIN_TEXT_FORMAT);
				addEventListener(ResourceEvent.ROW_SELECTION_CHANGED, rowSelectionChangedHandler);
				addEventListener(ResourceEvent.REFRESH, pinaraJobListGrid_creationCompleteHandler);
			}
			
			private function rowSelectionChangedHandler(event:ResourceEvent):void {
				if(userListGrid.pinaraUserList.selectedIndex != -1) {
					uculEditUser.enabled = true;
					uculChangePassUser.enabled = true;
					uculDeleteUser.enabled = true;
				} else {
					uculEditUser.enabled = false;
					uculChangePassUser.enabled = false;
					uculDeleteUser.enabled = false;
				}
				currentDataItem = XML(event.object);
			}
			
			private function titleWindow_keyDown(evt:mx.events.KeyboardEvent):void {
				if (evt.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new mx.events.CloseEvent(mx.events.CloseEvent.CLOSE));
				}
			}
			
			private function removeMe():void {
				PopUpManager.removePopUp(this);
			}
			
			protected function pinaraJobListGrid_creationCompleteHandler(event:FlexEvent):void
			{
				refreshList();
			}
			
			public function refreshList():void {
				BasicAuthenticationHandler.authAndCall(userOpsService, "userlist", "dummyforsecurity");
				
				// pinaraJobListGrid.jobListXmlCollection = jobListXmlCollection;
				// permitEnableAllBtn();
			}
			
			private function handleCloseEvent():void {
				PopUpManager.removePopUp(this);
			}
			
			protected function uculAddUser_clickHandler(event:MouseEvent):void
			{
				var userAddWindow:UserAddWindow = PopUpManager.createPopUp(this, UserAddWindow, true) as UserAddWindow;
				userAddWindow.parentRef = this;
				//userAddWindow.currentUser = (FlexGlobals.topLevelApplication as PinaraUI).currentUser.username;
				userAddWindow = UserUtils.initUserAddWindow(userAddWindow);
				PopUpManager.centerPopUp(userAddWindow);
				userAddWindow.setFocus();
			}
			
			protected function uculEditUser_clickHandler(event:MouseEvent):void
			{
				var userEditWindow:UserEditWindow = PopUpManager.createPopUp(this, UserEditWindow, true) as UserEditWindow;
				// userEditWindow.currentUser = (FlexGlobals.topLevelApplication as PinaraUI).currentUser.username;
				// userEditWindow.currentUser = currentDataItem.username;
				userEditWindow.parentRef = this;
				userEditWindow = UserUtils.initUserEditWindow(resourceManager, userEditWindow);
				userEditWindow.userDetailXml = currentDataItem;
				PopUpManager.centerPopUp(userEditWindow);
			}
			
			protected function uculChangePassUser_clickHandler(event:MouseEvent):void
			{
				var changePassWindow:ChangePass = PopUpManager.createPopUp(this, ChangePass, true) as ChangePass;
				if(ModelLocator.getInstance().currentUser.username != currentDataItem.username) {
					changePassWindow.baseY1 = 0;
					changePassWindow.baseY2 = 0;
					
					changePassWindow.forceLogout = false;	

					changePassWindow.oldPassword.visible = false;
					changePassWindow.oldPassword.includeInLayout = false;
					
					changePassWindow.oldPassLblId.visible = false;
					changePassWindow.oldPassLblId.includeInLayout = false;
					
					changePassWindow.oldPasswordValidator.enabled = false;
					changePassWindow.currentUser = currentDataItem.username;
				} else {
					changePassWindow.currentUser = ModelLocator.getInstance().currentUser.username;					
				}
				changePassWindow = UserUtils.initChangePassWindow(changePassWindow);
				PopUpManager.centerPopUp(changePassWindow);
				changePassWindow.setFocus();
			
			}
			
			protected function uculDeleteUser_clickHandler(event:MouseEvent):void
			{
				var errorStr:String = resourceManager.getString("messages", "error");
				Alert.okLabel = resourceManager.getString("messages", "okLabel");
				var confMsg:String = resourceManager.getString("messages", "deleteUserConfirm");
				Alert.show(confMsg, resourceManager.getString("messages", "warnKey"), Alert.OK|Alert.CANCEL, this, deleteUser, null, Alert.CANCEL);
			}
			
			private function deleteUser(eventObj:mx.events.CloseEvent):void {
				
				if(eventObj.detail == Alert.OK) {
					var packedResponse:XML;
					// packedResponse = XML("<userInfo><id>" + currentDataItem.id + "</id><username>"  + currentDataItem.text + "</username><roleinfo>" + currentDataItem.roleinfo + "</roleinfo><statuinfo>" + currentDataItem.statusinfo + "</statuinfo></userInfo>");
					packedResponse = XML(currentDataItem.id); 
					BasicAuthenticationHandler.authAndCall(userOpsService, "userdelete", packedResponse);
				} 

				userListGrid.pinaraUserList.selectedItem = null;
				
				refreshList();
				dispatchEvent(new ResourceEvent(ResourceEvent.ROW_SELECTION_CHANGED));
			}
			
			protected function userOpsService_resultHandler(event:ResultEvent):void
			{
				var userListXML:XML;
				
				try {
					// returnXml = XML(event.result);
					userListXML = XML(event.message.body);
				} catch(err:Error) {
					Alert.show("Result : " + err.message);
				}

				userListGrid.userListXmlCollection = new XMLListCollection();
				userListGrid.userListXmlCollection.source = userListXML.children(); 

				//handleCloseEvent();
			}
			
			protected function userOpsService_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function enableAllBtn_clickHandler(event:MouseEvent):void
			{
				// BasicAuthenticationHandler.authAndCall(grpMngService, "enablegrp", selectedGroupId);				
				
			}
			
			protected function disableAllBtn_clickHandler(event:MouseEvent):void
			{
				// BasicAuthenticationHandler.authAndCall(grpMngService, "disablegrp", selectedGroupId);
				
			}
			
			protected function refreshBtn_clickHandler(event:MouseEvent):void
			{
				refreshList();
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<userops:UserOps id="userOpsService" result="userOpsService_resultHandler(event)" fault="userOpsService_faultHandler(event)" />
	</fx:Declarations>
	
	<s:VGroup paddingLeft="10" paddingTop="10">
		
		<s:HGroup>
			<jobdetail:GridStatuFilter data="{userListGrid.userListXmlCollection}" width="100%" height="20"/>
			<s:Button id="refreshBtn" label="Refresh" click="refreshBtn_clickHandler(event)" />
			<s:Button id="enableAllBtn" label="Enable All Jobs" visible="false" click="enableAllBtn_clickHandler(event)" />
			<s:Button id="disableAllBtn" label="Disable All Jobs" visible="false" click="disableAllBtn_clickHandler(event)" />
		</s:HGroup>

		
		<user:UserListGrid id="userListGrid" creationComplete="pinaraJobListGrid_creationCompleteHandler(event)"/>
		
		<s:BorderContainer y="135" width="100%" height="20%" borderWeight="2" cornerRadius="3" dropShadowVisible="true" backgroundColor="gray">
			<s:HGroup paddingBottom="5" paddingTop="5" paddingLeft="50">
				<s:Button id="uculAddUser" label="{resourceManager.getString('messages', 'uculAddUser')}" click="uculAddUser_clickHandler(event)" /> 
				<s:Button id="uculEditUser" label="{resourceManager.getString('messages', 'uculEditUser')}" click="uculEditUser_clickHandler(event)" enabled="false" /> 
				<s:Button id="uculChangePassUser" label="{resourceManager.getString('messages', 'changePassword')}" click="uculChangePassUser_clickHandler(event)"  enabled="false" />
				<s:Button id="uculDeleteUser" label="{resourceManager.getString('messages', 'uculDeleteUser')}" click="uculDeleteUser_clickHandler(event)" enabled="false" /> 
				<s:Button label="{resourceManager.getString('messages', 'uculClose')}" click="handleCloseEvent();"/> 
			</s:HGroup>
		</s:BorderContainer>
	</s:VGroup>
	
</s:TitleWindow> 
