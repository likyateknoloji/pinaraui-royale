<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   close="handleCloseEvent()"
			   keyDown="titleWindow_keyDown(event);"
			   width="320" height="240" xmlns:userops="com.likya.pinara.services.userops.*">
	
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.model.UserRole;
			import com.likya.pinara.model.UserStatu;
			import com.likya.pinara.utils.BasicAuthenticationHandler;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			[Bindable]
			public var parentRef:UserListWindow;
			
			[Bindable]
			public var userDetailXml:XML;
			
			[Bindable]
			public var currentUser:String;
			[Bindable]
			public var userNameLbl:String;
			[Bindable]
			public var newPassLbl:String;
			[Bindable]
			public var confNewPassLbl:String;
			[Bindable]
			public var roleInfoLbl:String;
			[Bindable]
			public var statuInfoLbl:String;
			[Bindable]
			public var okBtnLbl:String;
			[Bindable]
			public var cnclBtnLbl:String;
			
			[Bindable]
			public var roleList:ArrayCollection = new ArrayCollection(
				[ 
					{name:"ADMIN", value:UserRole.ADMIN},
					{name:"OPERATION", value:UserRole.OPERATION},
					{name:"VIEW", value:UserRole.VIEW} 
				]);

			[Bindable]
			public var statuList:ArrayCollection = new ArrayCollection(
				[ 
					{name:"ACTIVE", value:UserStatu.ACTIVE},
					{name:"DEACTIVE", value:UserStatu.DEACTIVE}
				]);
			
			private function handleCloseEvent():void {
				PopUpManager.removePopUp(this);
			}
			
			private function titleWindow_keyDown(evt:KeyboardEvent):void {
				if (evt.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
			
			private function validateChangePassword():Boolean {
				
				newPasswordValidator.source = newPassword;
				confirmNewPasswordValidator.source = confirmNewPassword;
				
				if (passwordValidationError() == 0) {
					return true;
				} else {
					return false;
				}
			}
			
			private function passwordValidationError():int {
				
				var totalError:int = 0;
				var userNameValidationArray:Array = Validator.validateAll([userNameValidator]);
				var newPasswordValidationArray:Array = Validator.validateAll([newPasswordValidator]);
				var confirmNewPasswordValidatorionArray:Array = Validator.validateAll([confirmNewPasswordValidator]);
				
				totalError = userNameValidationArray.length + newPasswordValidationArray.length + confirmNewPasswordValidatorionArray.length;
				
				return totalError;
			}
			
			protected function save_clickHandler(event:MouseEvent):void {
				var errorStr:String = resourceManager.getString("messages", "error");
				Alert.okLabel = resourceManager.getString("messages", "okLabel");
				
				if (validateChangePassword()) {
					if (newPassword.text == confirmNewPassword.text) {
						var confMsg:String = "";
						confMsg = resourceManager.getString("messages", "addUserConfirm");
						Alert.show(confMsg, resourceManager.getString("messages", "warnKey"), Alert.OK|Alert.CANCEL, this, processWork, null, Alert.CANCEL);
					} else {
						Alert.show(resourceManager.getString("messages", "changePasswordAuthenticationError"), errorStr, Alert.OK, this, null, null);
					}
				} else {
					Alert.show(resourceManager.getString("messages", "validationMessages"), errorStr, Alert.OK, this, null, null);
				}
			}
			
			private function processWork(eventObj:CloseEvent):void {
				
				var serializationInfo:String = "false";
				
				if(eventObj.detail == Alert.OK) {
					serializationInfo = "true";
				}
				
				// var myraGenericJob:XML = ViewToJobXml.getXML(this);
				// trace("myXML", myXML.toXMLString());
				// Alert.show(myraGenericJob);
				
				// var packedResponse:XML = XML("<data><serialize>" + serializationInfo + "</serialize><datamess>" + myraGenericJob + "</datamess></data>");
				
				// var packedResponse:XML = XML("<xmldata><username>" + currentUser + "</username><oldpass>" + roleInfo.selectedItem + "</oldpass><newpass>" + newPassword.text + "</newpass></xmldata>");
				
				var packedResponse:XML;
				packedResponse = XML("<userInfo><username>"  + userName.text + "</username><password>" + newPassword.text + "</password><roleinfo>" + roleInfo.selectedItem.name + "</roleinfo><statuinfo>" + statuInfo.selectedItem.name + "</statuinfo></userInfo>");
				BasicAuthenticationHandler.authAndCall(userOpsService, "useradd", packedResponse);
				
				refreshAfter();
			}
			
			protected function refreshAfter():void {
				parentRef.refreshList();		
				handleCloseEvent();
			}
			
			public function disablePage():void {
				currentView.enabled = false;
				currentView.mouseEnabled = false;
			}
			
			public function enablePage():void {
				currentView.enabled = true;
				currentView.mouseEnabled = true;
			}
			
			protected function userOpsService_resultHandler(event:ResultEvent):void
			{
				BasicAuthenticationHandler.service_resultHandler(this, event);
			}
			
			protected function userOpsService_faultHandler(event:FaultEvent):void
			{
				BasicAuthenticationHandler.service_faultHandler(event);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<mx:StringValidator id="userNameValidator"
							source="{userName}"
							property="text"  
							required="true"
							maxLength="10" 
							tooLongError="{resourceManager.getString('messages', 'tlosUserNameValidatorMessage')}" 
							requiredFieldError="{resourceManager.getString('messages', 'requiredMessage')}"/>
		
		<mx:StringValidator id="newPasswordValidator" 
							source="{newPassword}" 
							property="text"  
							required="true"
							maxLength="10" 
							tooLongError="{resourceManager.getString('messages', 'passwordValidatorMessage')}"
							requiredFieldError="{resourceManager.getString('messages', 'requiredMessage')}"/>
		
		<mx:StringValidator id="confirmNewPasswordValidator" 
							source="{confirmNewPassword}" 
							property="text"  
							required="true"
							maxLength="10" 
							tooLongError="{resourceManager.getString('messages', 'passwordValidatorMessage')}"
							requiredFieldError="{resourceManager.getString('messages', 'requiredMessage')}"/>
		
		
		<userops:UserOps id="userOpsService" result="userOpsService_resultHandler(event)" fault="userOpsService_faultHandler(event)" />
		
	</fx:Declarations>
	
	<s:Group id="currentView" width="100%" height="100%">
		
		<s:Label x="27" y="21" text="{userNameLbl}"/>
		<s:TextInput id="userName" x="170" y="15"/>
		
		<s:Label x="27" y="51" text="{newPassLbl}"/>			
		<s:TextInput id="newPassword" x="170" y="45" displayAsPassword="true" />
		
		<s:Label x="27" y="81" text="{confNewPassLbl}"/>			
		<s:TextInput id="confirmNewPassword" x="170" y="75" displayAsPassword="true" />
		
		<s:Label x="27" y="111" text="{roleInfoLbl}"/>
		<s:DropDownList x="170" y="105" id="roleInfo" width="130" prompt="{roleInfoLbl}" selectedIndex="{roleList.length - 1}" dataProvider="{roleList}" labelField="name" /> 

		<s:Label x="27" y="141" text="{statuInfoLbl}"/>
		<s:DropDownList x="170" y="135" id="statuInfo" width="130" prompt="{statuInfoLbl}" selectedIndex="0" dataProvider="{statuList}" labelField="name" /> 

	</s:Group>
	
	<s:BorderContainer y="165" width="100%" height="20%" borderWeight="2" cornerRadius="3" dropShadowVisible="true" backgroundColor="gray">
		<s:HGroup paddingBottom="5" paddingTop="5" paddingLeft="90">
			<s:Button label="{okBtnLbl}"
					  click="save_clickHandler(event);" /> 
			<s:Button label="{cnclBtnLbl}"
					  click="handleCloseEvent();"/> 
		</s:HGroup>
	</s:BorderContainer>
	
</s:TitleWindow>
