<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  implements="com.likya.pinara.modules.IModuleInterface"
		  creationComplete="module1_creationCompleteHandler(event)"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			
			import spark.components.NavigatorContent;
			
			[Bindable] 
			private var jobs:ArrayCollection;
			
			public var selectedJobId:String;
			
			private var executeRShellParamsXml:XML;
			
			[Bindable]
			public var tlosMenuData:XMLListCollection = new XMLListCollection();
			
			[Bindable]
			public var jobDetailXml:XML;
			
			private var editMode:Boolean = false;
			
			public function getDate(dateTxt:String):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = 'JJ:NN:SS DD/MM/YYYY';
				return dateFormatter.format(DateFormatter.parseDateString(dateTxt))
			}
			
			protected function xmlService_faultHandler(event:FaultEvent):void {
				Alert.show(event.toString());
			}
			
			protected function serverdef_itemClickHandler(event:ItemClickEvent):void {
				
			}
			
			public function setEditMode(mode:Boolean):void {
				editMode = mode;
			}
			
			public function setDataXml(xml:XML):void {
				// trace(xml);
				// trace(xml.executeRShellParams.hostName);
				// trace(xml.executeRShellParams.port);
				// trace(xml.executeRShellParams.rshellPassword);
				// trace(xml.executeRShellParams.fileSeperator);
				
				executeRShellParamsXml = xml;
			}
			
			protected function module1_creationCompleteHandler(event:FlexEvent):void {
				//trace("XML(executeRShellParamsXml) : " + XML(executeRShellParamsXml));
				if(executeRShellParamsXml != null) {
					if(XML(executeRShellParamsXml).hasOwnProperty("hostName")) {
						hostName.selected = true;
						ipHostText.text = executeRShellParamsXml.hostName;
					} else {
						ipAddress.selected = true;
						ipHostText.text = executeRShellParamsXml.ipAddress;
					}
					
					userInput.text = executeRShellParamsXml.userName;
					passInput.text = executeRShellParamsXml.rshellPassword;
					portInput.text = executeRShellParamsXml.port;
					fileDelInput.text = executeRShellParamsXml.fileSeperator
				}
				
				if(editMode) {
					ipHostText.editable = true;
					userInput.editable = true;
					passInput.editable = true;
					portInput.editable = true;
					fileDelInput.editable = true;
				}
			}
			
			public function getDataXml():XML {
				var rShellParams:XML = 
					<rs:executeRShellParams xmlns:rs="http://www.likyateknoloji.com/rs">
					</rs:executeRShellParams>;
				if(serverdef.selection == hostName) {
					rShellParams.appendChild(<rs:hostName xmlns:rs="http://www.likyateknoloji.com/rs">{"" + ipHostText.text } </rs:hostName>);
				} else {
					rShellParams.appendChild(<rs:ipAddress xmlns:rs="http://www.likyateknoloji.com/rs">{"" + ipHostText.text } </rs:ipAddress>);
				}
			    rShellParams.appendChild(<rs:port xmlns:rs="http://www.likyateknoloji.com/rs">{"" + portInput.text } </rs:port>);
			    rShellParams.appendChild(<rs:userName xmlns:rs="http://www.likyateknoloji.com/rs">{"" + userInput.text } </rs:userName>);
				rShellParams.appendChild(<rs:rshellPassword  xmlns:rs="http://www.likyateknoloji.com/rs">{"" + passInput.text } </rs:rshellPassword>);
				rShellParams.appendChild(<lik:fileSeperator xmlns:lik="http://www.likyateknoloji.com/likya-gen">{"" + fileDelInput.text } </lik:fileSeperator>);	
				
				return rShellParams;
			}
			
			public function validateForm():Boolean
			{
				if(ipHostText.text == "") {
					Alert.show(resourceManager.getString("messages", "remoteSchHostNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(portInput.text == "") {
					Alert.show(resourceManager.getString("messages", "remoteSchPortNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(userInput.text == "") {
					Alert.show(resourceManager.getString("messages", "remoteSchUserNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(passInput.text == "") {
					Alert.show(resourceManager.getString("messages", "remoteSchPassNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(fileDelInput.text == "") {
					Alert.show(resourceManager.getString("messages", "remoteSchFileSepNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				
				return true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="serverdef" itemClick="serverdef_itemClickHandler(event)"/>
	</fx:Declarations>
	
	<s:BorderContainer id="remoteSchPropId" width="100%" height="100%" borderVisible="false"> 
		<s:layout> 
			<s:VerticalLayout gap="5" clipAndEnableScrolling="true"/> 
		</s:layout>
		
		<s:HGroup verticalAlign="top" paddingTop="10" paddingLeft="10">
			<s:RadioButton group="{serverdef}" 
						   selected="true"
						   id="hostName" 
						   value="hostName" 
						   label="Hostname" 
						   width="100"/>
			<s:RadioButton group="{serverdef}" 
						   id="ipAddress" 
						   value="ipAddress" 
						   label="IP Address" 
						   width="100"/>
			<s:TextInput id="ipHostText" editable="false"/>
		</s:HGroup>
		
		<mx:HRule width="100%"/>
		
		<s:HGroup verticalAlign="top" paddingTop="10" paddingLeft="10">
			<s:Label text="{resourceManager.getString('messages', 'remoteSchUserNames')}" />
			<s:TextInput id="userInput" editable="false"/>
			<s:Label text="{resourceManager.getString('messages', 'remoteSchPass')}" />
			<s:TextInput id="passInput" editable="false"/>
		</s:HGroup>
		
		<mx:HRule width="100%"/>
		
		<s:HGroup verticalAlign="baseline" paddingTop="10" paddingLeft="10">
			<s:Label text="{resourceManager.getString('messages', 'remoteSchPort')}" />
			<s:TextInput id="portInput" editable="false"/>
			<s:Label text="{resourceManager.getString('messages', 'remoteSchFileSep')}" />
			<s:TextInput id="fileDelInput" editable="false"/>
		</s:HGroup>
		
	</s:BorderContainer> 
</s:Module>
